{"meta":{"title":"大渔小予","subtitle":"","description":"大渔小予","author":"muxq","url":"https://muxq.github.io/ ","root":"/"},"pages":[{"title":"about","date":"2022-07-29T08:52:25.000Z","updated":"2022-07-29T08:52:35.877Z","comments":true,"path":"about/index.html","permalink":"https://muxq.github.io/%20/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-07-29T08:48:46.000Z","updated":"2022-07-29T08:49:15.740Z","comments":true,"path":"categories/index.html","permalink":"https://muxq.github.io/%20/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-07-29T08:47:49.000Z","updated":"2022-07-29T08:48:11.278Z","comments":true,"path":"tags/index.html","permalink":"https://muxq.github.io/%20/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Windows反调试技术","slug":"antidebug01","date":"2022-07-29T09:36:47.000Z","updated":"2022-08-01T06:15:06.736Z","comments":true,"path":"2022/07/29/antidebug01/","link":"","permalink":"https://muxq.github.io/%20/2022/07/29/antidebug01/","excerpt":"前言首先感谢github和hexo，让自己能够白piao一把，轻松搭建一个属于自己的博客，能够有一个记录，分享和学习的平台，开源，是这个世界最伟大的发明！ 开启本篇博文的正题，该篇博文主要讲解博主从接触到使用反调试工具的一些经验，如果你已是逆向大神，请指正文中的不正确的之处，博主在这里不胜感激，也希望通过博客结识对逆向感兴趣的朋友共同学习和突破。在没有接触反调试工具前，一直认PE程序逆向是一件非常困难的事情，相信很多Windows程序员都存在这样的观点。碰巧在工作中也遇到过需要实现保护自己程序的需求，这时候懵懂的了解了代码混淆，程序加壳的概念，但是当时并不的这些手段对Windows程序员开发的程序有多大作用，直到最近，工作中需要对竞品分析，分析同行产品中某一功能的实现原理，才对逆向有了一定的认知，随着不断的了解，发现原来自己写的程序都在”裸奔”。 本篇最后会进行实际操作，如何使用动态和静态逆向实现的账号密码登录程序。","text":"前言首先感谢github和hexo，让自己能够白piao一把，轻松搭建一个属于自己的博客，能够有一个记录，分享和学习的平台，开源，是这个世界最伟大的发明！ 开启本篇博文的正题，该篇博文主要讲解博主从接触到使用反调试工具的一些经验，如果你已是逆向大神，请指正文中的不正确的之处，博主在这里不胜感激，也希望通过博客结识对逆向感兴趣的朋友共同学习和突破。在没有接触反调试工具前，一直认PE程序逆向是一件非常困难的事情，相信很多Windows程序员都存在这样的观点。碰巧在工作中也遇到过需要实现保护自己程序的需求，这时候懵懂的了解了代码混淆，程序加壳的概念，但是当时并不的这些手段对Windows程序员开发的程序有多大作用，直到最近，工作中需要对竞品分析，分析同行产品中某一功能的实现原理，才对逆向有了一定的认知，随着不断的了解，发现原来自己写的程序都在”裸奔”。 本篇最后会进行实际操作，如何使用动态和静态逆向实现的账号密码登录程序。 理论知识 本篇所述均基于Windowns操作系统（这里先映下题 👈） 概念 Windows PE(Preinstallation Environment - 预安装环境)可执行程序 Windows 应用程序开发，是面向Windows API开发，运行在操作系统之上（这点很重要，也是我们能够逆向的基础） 逆向分为静态和动态，动态分析和静态分析都逆向的一种手段，两者相辅相成，在静态无法分析出实现过程时，可结合动态分析，反之亦然。 技术 懂一些汇编知识 有一定的Windows编程基础(开发语言无关) 能够熟练搜索Windows API帮助文档(这个很重要) 熟练的运用逆向工具 反调试工具 静态 Ida pro &#x2F;&#x2F;推荐使用, free版本只支持x64 ghidra &#x2F;&#x2F;开源逆向工具媲美Ida 动态 OllyDbg &#x2F;&#x2F;很久未维护，只支持x86 x64Dbg &#x2F;&#x2F;推荐使用，支持x86和x64 api-monitor &#x2F;&#x2F;api监控程序，便于分析程序行为，和寻找逆向关键点 反调试的原理，基于PE文件的结构原理，和应用程序对系统API的依赖，通过分析应用程序所使用到的系统API和依赖的资源文件来逆向出应用程序所实现的功能。Windows程序都是面向接口的编程，也就是可以将Windows操作系统比喻为一辆汽车，将我们的应用程序比喻为油门，脚刹和方向盘，你要去哪里和怎么走就是Windows程序员编程(面向API)所实现的功能。 静态分析静态分析是指使用逆向工具来分析应用程序的某个模块，对，就是字面的意思，那为什么需要静态分析呢？主要有以下几点： 1.应用程序只能部分拷贝 2.运行环境依赖，实际运行有依赖，如果用户的口令认证等 3.应用程序太大，实际分析的功能仅在一个dll模块内 我们用C++来实现一个简单的动态链接库模块static_anti_dll_01.dll，源码如下： 12345678910111213141516171819202122232425#include &lt;Windows.h&gt;#include &lt;stdio.h&gt;extern &quot;C&quot; __declspec(dllexport) void say_hello(const char *msg)&#123; fprintf(stdout, &quot;hello %s\\n&quot;, msg);&#125;extern &quot;C&quot; __declspec(dllexport) bool GetSystemVersion(int &amp;major, int &amp;minor)&#123; OSVERSIONINFO osvi; BOOL bIsWindowsXPorLater; ZeroMemory(&amp;osvi, sizeof(OSVERSIONINFO)); osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFO); if (!GetVersionEx(&amp;osvi)) &#123; fprintf(stderr, &quot;get system version failed\\n&quot;); return false; &#125; major = osvi.dwMajorVersion; minor = osvi.dwMinorVersion; return true;&#125; 上面的代码相信大家能够看懂，say_hello函数用来接收一个字符串，并且打印到标准输出，GetSystemVersion用来获取当前的操作系统版本号。接下来我们就开始对它进行静态逆向分析，首先使用ida加载这个dll 动态分析动态分析：使用反调试程序在应用程序运行过程中，通过单步调试和应用程序内存来逆向分析","categories":[{"name":"anti","slug":"anti","permalink":"https://muxq.github.io/%20/categories/anti/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://muxq.github.io/%20/tags/windows/"},{"name":"anti","slug":"anti","permalink":"https://muxq.github.io/%20/tags/anti/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-07-29T00:53:18.217Z","updated":"2022-08-01T05:39:59.078Z","comments":true,"path":"2022/07/29/hello-world/","link":"","permalink":"https://muxq.github.io/%20/2022/07/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"anti","slug":"anti","permalink":"https://muxq.github.io/%20/categories/anti/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://muxq.github.io/%20/tags/windows/"},{"name":"anti","slug":"anti","permalink":"https://muxq.github.io/%20/tags/anti/"}]}